/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package rpc.domain;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HttpAppHost extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3645663013354985496L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HttpAppHost\",\"namespace\":\"rpc.domain\",\"fields\":[{\"name\":\"reportTime\",\"type\":[\"string\",\"null\"]},{\"name\":\"appType\",\"type\":[\"int\",\"null\"]},{\"name\":\"appSubType\",\"type\":[\"string\",\"null\"]},{\"name\":\"userIp\",\"type\":[\"string\",\"null\"]},{\"name\":\"userPort\",\"type\":[\"int\",\"null\"]},{\"name\":\"appServerIp\",\"type\":[\"string\",\"null\"]},{\"name\":\"appServerPort\",\"type\":[\"string\",\"null\"]},{\"name\":\"host\",\"type\":[\"string\",\"null\"]},{\"name\":\"cellid\",\"type\":[\"string\",\"null\"]},{\"name\":\"attemps\",\"type\":[\"int\",\"null\"]},{\"name\":\"accepts\",\"type\":[\"int\",\"null\"]},{\"name\":\"trafficUL\",\"type\":[\"long\",\"null\"]},{\"name\":\"tracfficDL\",\"type\":[\"long\",\"null\"]},{\"name\":\"retranUL\",\"type\":[\"long\",\"null\"]},{\"name\":\"retranDL\",\"type\":[\"long\",\"null\"]},{\"name\":\"failCount\",\"type\":[\"int\",\"null\"]},{\"name\":\"transDelay\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HttpAppHost> ENCODER =
      new BinaryMessageEncoder<HttpAppHost>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HttpAppHost> DECODER =
      new BinaryMessageDecoder<HttpAppHost>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HttpAppHost> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HttpAppHost> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HttpAppHost>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HttpAppHost to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HttpAppHost from a ByteBuffer. */
  public static HttpAppHost fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence reportTime;
  @Deprecated public java.lang.Integer appType;
  @Deprecated public java.lang.CharSequence appSubType;
  @Deprecated public java.lang.CharSequence userIp;
  @Deprecated public java.lang.Integer userPort;
  @Deprecated public java.lang.CharSequence appServerIp;
  @Deprecated public java.lang.CharSequence appServerPort;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.lang.CharSequence cellid;
  @Deprecated public java.lang.Integer attemps;
  @Deprecated public java.lang.Integer accepts;
  @Deprecated public java.lang.Long trafficUL;
  @Deprecated public java.lang.Long tracfficDL;
  @Deprecated public java.lang.Long retranUL;
  @Deprecated public java.lang.Long retranDL;
  @Deprecated public java.lang.Integer failCount;
  @Deprecated public java.lang.Long transDelay;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HttpAppHost() {}

  /**
   * All-args constructor.
   * @param reportTime The new value for reportTime
   * @param appType The new value for appType
   * @param appSubType The new value for appSubType
   * @param userIp The new value for userIp
   * @param userPort The new value for userPort
   * @param appServerIp The new value for appServerIp
   * @param appServerPort The new value for appServerPort
   * @param host The new value for host
   * @param cellid The new value for cellid
   * @param attemps The new value for attemps
   * @param accepts The new value for accepts
   * @param trafficUL The new value for trafficUL
   * @param tracfficDL The new value for tracfficDL
   * @param retranUL The new value for retranUL
   * @param retranDL The new value for retranDL
   * @param failCount The new value for failCount
   * @param transDelay The new value for transDelay
   */
  public HttpAppHost(java.lang.CharSequence reportTime, java.lang.Integer appType, java.lang.CharSequence appSubType, java.lang.CharSequence userIp, java.lang.Integer userPort, java.lang.CharSequence appServerIp, java.lang.CharSequence appServerPort, java.lang.CharSequence host, java.lang.CharSequence cellid, java.lang.Integer attemps, java.lang.Integer accepts, java.lang.Long trafficUL, java.lang.Long tracfficDL, java.lang.Long retranUL, java.lang.Long retranDL, java.lang.Integer failCount, java.lang.Long transDelay) {
    this.reportTime = reportTime;
    this.appType = appType;
    this.appSubType = appSubType;
    this.userIp = userIp;
    this.userPort = userPort;
    this.appServerIp = appServerIp;
    this.appServerPort = appServerPort;
    this.host = host;
    this.cellid = cellid;
    this.attemps = attemps;
    this.accepts = accepts;
    this.trafficUL = trafficUL;
    this.tracfficDL = tracfficDL;
    this.retranUL = retranUL;
    this.retranDL = retranDL;
    this.failCount = failCount;
    this.transDelay = transDelay;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return reportTime;
    case 1: return appType;
    case 2: return appSubType;
    case 3: return userIp;
    case 4: return userPort;
    case 5: return appServerIp;
    case 6: return appServerPort;
    case 7: return host;
    case 8: return cellid;
    case 9: return attemps;
    case 10: return accepts;
    case 11: return trafficUL;
    case 12: return tracfficDL;
    case 13: return retranUL;
    case 14: return retranDL;
    case 15: return failCount;
    case 16: return transDelay;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: reportTime = (java.lang.CharSequence)value$; break;
    case 1: appType = (java.lang.Integer)value$; break;
    case 2: appSubType = (java.lang.CharSequence)value$; break;
    case 3: userIp = (java.lang.CharSequence)value$; break;
    case 4: userPort = (java.lang.Integer)value$; break;
    case 5: appServerIp = (java.lang.CharSequence)value$; break;
    case 6: appServerPort = (java.lang.CharSequence)value$; break;
    case 7: host = (java.lang.CharSequence)value$; break;
    case 8: cellid = (java.lang.CharSequence)value$; break;
    case 9: attemps = (java.lang.Integer)value$; break;
    case 10: accepts = (java.lang.Integer)value$; break;
    case 11: trafficUL = (java.lang.Long)value$; break;
    case 12: tracfficDL = (java.lang.Long)value$; break;
    case 13: retranUL = (java.lang.Long)value$; break;
    case 14: retranDL = (java.lang.Long)value$; break;
    case 15: failCount = (java.lang.Integer)value$; break;
    case 16: transDelay = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'reportTime' field.
   * @return The value of the 'reportTime' field.
   */
  public java.lang.CharSequence getReportTime() {
    return reportTime;
  }

  /**
   * Sets the value of the 'reportTime' field.
   * @param value the value to set.
   */
  public void setReportTime(java.lang.CharSequence value) {
    this.reportTime = value;
  }

  /**
   * Gets the value of the 'appType' field.
   * @return The value of the 'appType' field.
   */
  public java.lang.Integer getAppType() {
    return appType;
  }

  /**
   * Sets the value of the 'appType' field.
   * @param value the value to set.
   */
  public void setAppType(java.lang.Integer value) {
    this.appType = value;
  }

  /**
   * Gets the value of the 'appSubType' field.
   * @return The value of the 'appSubType' field.
   */
  public java.lang.CharSequence getAppSubType() {
    return appSubType;
  }

  /**
   * Sets the value of the 'appSubType' field.
   * @param value the value to set.
   */
  public void setAppSubType(java.lang.CharSequence value) {
    this.appSubType = value;
  }

  /**
   * Gets the value of the 'userIp' field.
   * @return The value of the 'userIp' field.
   */
  public java.lang.CharSequence getUserIp() {
    return userIp;
  }

  /**
   * Sets the value of the 'userIp' field.
   * @param value the value to set.
   */
  public void setUserIp(java.lang.CharSequence value) {
    this.userIp = value;
  }

  /**
   * Gets the value of the 'userPort' field.
   * @return The value of the 'userPort' field.
   */
  public java.lang.Integer getUserPort() {
    return userPort;
  }

  /**
   * Sets the value of the 'userPort' field.
   * @param value the value to set.
   */
  public void setUserPort(java.lang.Integer value) {
    this.userPort = value;
  }

  /**
   * Gets the value of the 'appServerIp' field.
   * @return The value of the 'appServerIp' field.
   */
  public java.lang.CharSequence getAppServerIp() {
    return appServerIp;
  }

  /**
   * Sets the value of the 'appServerIp' field.
   * @param value the value to set.
   */
  public void setAppServerIp(java.lang.CharSequence value) {
    this.appServerIp = value;
  }

  /**
   * Gets the value of the 'appServerPort' field.
   * @return The value of the 'appServerPort' field.
   */
  public java.lang.CharSequence getAppServerPort() {
    return appServerPort;
  }

  /**
   * Sets the value of the 'appServerPort' field.
   * @param value the value to set.
   */
  public void setAppServerPort(java.lang.CharSequence value) {
    this.appServerPort = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return The value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'cellid' field.
   * @return The value of the 'cellid' field.
   */
  public java.lang.CharSequence getCellid() {
    return cellid;
  }

  /**
   * Sets the value of the 'cellid' field.
   * @param value the value to set.
   */
  public void setCellid(java.lang.CharSequence value) {
    this.cellid = value;
  }

  /**
   * Gets the value of the 'attemps' field.
   * @return The value of the 'attemps' field.
   */
  public java.lang.Integer getAttemps() {
    return attemps;
  }

  /**
   * Sets the value of the 'attemps' field.
   * @param value the value to set.
   */
  public void setAttemps(java.lang.Integer value) {
    this.attemps = value;
  }

  /**
   * Gets the value of the 'accepts' field.
   * @return The value of the 'accepts' field.
   */
  public java.lang.Integer getAccepts() {
    return accepts;
  }

  /**
   * Sets the value of the 'accepts' field.
   * @param value the value to set.
   */
  public void setAccepts(java.lang.Integer value) {
    this.accepts = value;
  }

  /**
   * Gets the value of the 'trafficUL' field.
   * @return The value of the 'trafficUL' field.
   */
  public java.lang.Long getTrafficUL() {
    return trafficUL;
  }

  /**
   * Sets the value of the 'trafficUL' field.
   * @param value the value to set.
   */
  public void setTrafficUL(java.lang.Long value) {
    this.trafficUL = value;
  }

  /**
   * Gets the value of the 'tracfficDL' field.
   * @return The value of the 'tracfficDL' field.
   */
  public java.lang.Long getTracfficDL() {
    return tracfficDL;
  }

  /**
   * Sets the value of the 'tracfficDL' field.
   * @param value the value to set.
   */
  public void setTracfficDL(java.lang.Long value) {
    this.tracfficDL = value;
  }

  /**
   * Gets the value of the 'retranUL' field.
   * @return The value of the 'retranUL' field.
   */
  public java.lang.Long getRetranUL() {
    return retranUL;
  }

  /**
   * Sets the value of the 'retranUL' field.
   * @param value the value to set.
   */
  public void setRetranUL(java.lang.Long value) {
    this.retranUL = value;
  }

  /**
   * Gets the value of the 'retranDL' field.
   * @return The value of the 'retranDL' field.
   */
  public java.lang.Long getRetranDL() {
    return retranDL;
  }

  /**
   * Sets the value of the 'retranDL' field.
   * @param value the value to set.
   */
  public void setRetranDL(java.lang.Long value) {
    this.retranDL = value;
  }

  /**
   * Gets the value of the 'failCount' field.
   * @return The value of the 'failCount' field.
   */
  public java.lang.Integer getFailCount() {
    return failCount;
  }

  /**
   * Sets the value of the 'failCount' field.
   * @param value the value to set.
   */
  public void setFailCount(java.lang.Integer value) {
    this.failCount = value;
  }

  /**
   * Gets the value of the 'transDelay' field.
   * @return The value of the 'transDelay' field.
   */
  public java.lang.Long getTransDelay() {
    return transDelay;
  }

  /**
   * Sets the value of the 'transDelay' field.
   * @param value the value to set.
   */
  public void setTransDelay(java.lang.Long value) {
    this.transDelay = value;
  }

  /**
   * Creates a new HttpAppHost RecordBuilder.
   * @return A new HttpAppHost RecordBuilder
   */
  public static rpc.domain.HttpAppHost.Builder newBuilder() {
    return new rpc.domain.HttpAppHost.Builder();
  }

  /**
   * Creates a new HttpAppHost RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HttpAppHost RecordBuilder
   */
  public static rpc.domain.HttpAppHost.Builder newBuilder(rpc.domain.HttpAppHost.Builder other) {
    return new rpc.domain.HttpAppHost.Builder(other);
  }

  /**
   * Creates a new HttpAppHost RecordBuilder by copying an existing HttpAppHost instance.
   * @param other The existing instance to copy.
   * @return A new HttpAppHost RecordBuilder
   */
  public static rpc.domain.HttpAppHost.Builder newBuilder(rpc.domain.HttpAppHost other) {
    return new rpc.domain.HttpAppHost.Builder(other);
  }

  /**
   * RecordBuilder for HttpAppHost instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HttpAppHost>
    implements org.apache.avro.data.RecordBuilder<HttpAppHost> {

    private java.lang.CharSequence reportTime;
    private java.lang.Integer appType;
    private java.lang.CharSequence appSubType;
    private java.lang.CharSequence userIp;
    private java.lang.Integer userPort;
    private java.lang.CharSequence appServerIp;
    private java.lang.CharSequence appServerPort;
    private java.lang.CharSequence host;
    private java.lang.CharSequence cellid;
    private java.lang.Integer attemps;
    private java.lang.Integer accepts;
    private java.lang.Long trafficUL;
    private java.lang.Long tracfficDL;
    private java.lang.Long retranUL;
    private java.lang.Long retranDL;
    private java.lang.Integer failCount;
    private java.lang.Long transDelay;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(rpc.domain.HttpAppHost.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.reportTime)) {
        this.reportTime = data().deepCopy(fields()[0].schema(), other.reportTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appType)) {
        this.appType = data().deepCopy(fields()[1].schema(), other.appType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appSubType)) {
        this.appSubType = data().deepCopy(fields()[2].schema(), other.appSubType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userIp)) {
        this.userIp = data().deepCopy(fields()[3].schema(), other.userIp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userPort)) {
        this.userPort = data().deepCopy(fields()[4].schema(), other.userPort);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.appServerIp)) {
        this.appServerIp = data().deepCopy(fields()[5].schema(), other.appServerIp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.appServerPort)) {
        this.appServerPort = data().deepCopy(fields()[6].schema(), other.appServerPort);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.host)) {
        this.host = data().deepCopy(fields()[7].schema(), other.host);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cellid)) {
        this.cellid = data().deepCopy(fields()[8].schema(), other.cellid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attemps)) {
        this.attemps = data().deepCopy(fields()[9].schema(), other.attemps);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.accepts)) {
        this.accepts = data().deepCopy(fields()[10].schema(), other.accepts);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trafficUL)) {
        this.trafficUL = data().deepCopy(fields()[11].schema(), other.trafficUL);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.tracfficDL)) {
        this.tracfficDL = data().deepCopy(fields()[12].schema(), other.tracfficDL);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.retranUL)) {
        this.retranUL = data().deepCopy(fields()[13].schema(), other.retranUL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.retranDL)) {
        this.retranDL = data().deepCopy(fields()[14].schema(), other.retranDL);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.failCount)) {
        this.failCount = data().deepCopy(fields()[15].schema(), other.failCount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.transDelay)) {
        this.transDelay = data().deepCopy(fields()[16].schema(), other.transDelay);
        fieldSetFlags()[16] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HttpAppHost instance
     * @param other The existing instance to copy.
     */
    private Builder(rpc.domain.HttpAppHost other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.reportTime)) {
        this.reportTime = data().deepCopy(fields()[0].schema(), other.reportTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appType)) {
        this.appType = data().deepCopy(fields()[1].schema(), other.appType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.appSubType)) {
        this.appSubType = data().deepCopy(fields()[2].schema(), other.appSubType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.userIp)) {
        this.userIp = data().deepCopy(fields()[3].schema(), other.userIp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.userPort)) {
        this.userPort = data().deepCopy(fields()[4].schema(), other.userPort);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.appServerIp)) {
        this.appServerIp = data().deepCopy(fields()[5].schema(), other.appServerIp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.appServerPort)) {
        this.appServerPort = data().deepCopy(fields()[6].schema(), other.appServerPort);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.host)) {
        this.host = data().deepCopy(fields()[7].schema(), other.host);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.cellid)) {
        this.cellid = data().deepCopy(fields()[8].schema(), other.cellid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.attemps)) {
        this.attemps = data().deepCopy(fields()[9].schema(), other.attemps);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.accepts)) {
        this.accepts = data().deepCopy(fields()[10].schema(), other.accepts);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.trafficUL)) {
        this.trafficUL = data().deepCopy(fields()[11].schema(), other.trafficUL);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.tracfficDL)) {
        this.tracfficDL = data().deepCopy(fields()[12].schema(), other.tracfficDL);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.retranUL)) {
        this.retranUL = data().deepCopy(fields()[13].schema(), other.retranUL);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.retranDL)) {
        this.retranDL = data().deepCopy(fields()[14].schema(), other.retranDL);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.failCount)) {
        this.failCount = data().deepCopy(fields()[15].schema(), other.failCount);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.transDelay)) {
        this.transDelay = data().deepCopy(fields()[16].schema(), other.transDelay);
        fieldSetFlags()[16] = true;
      }
    }

    /**
      * Gets the value of the 'reportTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getReportTime() {
      return reportTime;
    }

    /**
      * Sets the value of the 'reportTime' field.
      * @param value The value of 'reportTime'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setReportTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.reportTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'reportTime' field has been set.
      * @return True if the 'reportTime' field has been set, false otherwise.
      */
    public boolean hasReportTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'reportTime' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearReportTime() {
      reportTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'appType' field.
      * @return The value.
      */
    public java.lang.Integer getAppType() {
      return appType;
    }

    /**
      * Sets the value of the 'appType' field.
      * @param value The value of 'appType'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAppType(java.lang.Integer value) {
      validate(fields()[1], value);
      this.appType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'appType' field has been set.
      * @return True if the 'appType' field has been set, false otherwise.
      */
    public boolean hasAppType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'appType' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAppType() {
      appType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'appSubType' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppSubType() {
      return appSubType;
    }

    /**
      * Sets the value of the 'appSubType' field.
      * @param value The value of 'appSubType'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAppSubType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.appSubType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'appSubType' field has been set.
      * @return True if the 'appSubType' field has been set, false otherwise.
      */
    public boolean hasAppSubType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'appSubType' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAppSubType() {
      appSubType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'userIp' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserIp() {
      return userIp;
    }

    /**
      * Sets the value of the 'userIp' field.
      * @param value The value of 'userIp'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setUserIp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.userIp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'userIp' field has been set.
      * @return True if the 'userIp' field has been set, false otherwise.
      */
    public boolean hasUserIp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'userIp' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearUserIp() {
      userIp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'userPort' field.
      * @return The value.
      */
    public java.lang.Integer getUserPort() {
      return userPort;
    }

    /**
      * Sets the value of the 'userPort' field.
      * @param value The value of 'userPort'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setUserPort(java.lang.Integer value) {
      validate(fields()[4], value);
      this.userPort = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'userPort' field has been set.
      * @return True if the 'userPort' field has been set, false otherwise.
      */
    public boolean hasUserPort() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'userPort' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearUserPort() {
      userPort = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'appServerIp' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppServerIp() {
      return appServerIp;
    }

    /**
      * Sets the value of the 'appServerIp' field.
      * @param value The value of 'appServerIp'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAppServerIp(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.appServerIp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'appServerIp' field has been set.
      * @return True if the 'appServerIp' field has been set, false otherwise.
      */
    public boolean hasAppServerIp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'appServerIp' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAppServerIp() {
      appServerIp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'appServerPort' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppServerPort() {
      return appServerPort;
    }

    /**
      * Sets the value of the 'appServerPort' field.
      * @param value The value of 'appServerPort'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAppServerPort(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.appServerPort = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'appServerPort' field has been set.
      * @return True if the 'appServerPort' field has been set, false otherwise.
      */
    public boolean hasAppServerPort() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'appServerPort' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAppServerPort() {
      appServerPort = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * @return The value.
      */
    public java.lang.CharSequence getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * @param value The value of 'host'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.host = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'host' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearHost() {
      host = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'cellid' field.
      * @return The value.
      */
    public java.lang.CharSequence getCellid() {
      return cellid;
    }

    /**
      * Sets the value of the 'cellid' field.
      * @param value The value of 'cellid'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setCellid(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.cellid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'cellid' field has been set.
      * @return True if the 'cellid' field has been set, false otherwise.
      */
    public boolean hasCellid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'cellid' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearCellid() {
      cellid = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'attemps' field.
      * @return The value.
      */
    public java.lang.Integer getAttemps() {
      return attemps;
    }

    /**
      * Sets the value of the 'attemps' field.
      * @param value The value of 'attemps'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAttemps(java.lang.Integer value) {
      validate(fields()[9], value);
      this.attemps = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'attemps' field has been set.
      * @return True if the 'attemps' field has been set, false otherwise.
      */
    public boolean hasAttemps() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'attemps' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAttemps() {
      attemps = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'accepts' field.
      * @return The value.
      */
    public java.lang.Integer getAccepts() {
      return accepts;
    }

    /**
      * Sets the value of the 'accepts' field.
      * @param value The value of 'accepts'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setAccepts(java.lang.Integer value) {
      validate(fields()[10], value);
      this.accepts = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'accepts' field has been set.
      * @return True if the 'accepts' field has been set, false otherwise.
      */
    public boolean hasAccepts() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'accepts' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearAccepts() {
      accepts = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'trafficUL' field.
      * @return The value.
      */
    public java.lang.Long getTrafficUL() {
      return trafficUL;
    }

    /**
      * Sets the value of the 'trafficUL' field.
      * @param value The value of 'trafficUL'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setTrafficUL(java.lang.Long value) {
      validate(fields()[11], value);
      this.trafficUL = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'trafficUL' field has been set.
      * @return True if the 'trafficUL' field has been set, false otherwise.
      */
    public boolean hasTrafficUL() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'trafficUL' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearTrafficUL() {
      trafficUL = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'tracfficDL' field.
      * @return The value.
      */
    public java.lang.Long getTracfficDL() {
      return tracfficDL;
    }

    /**
      * Sets the value of the 'tracfficDL' field.
      * @param value The value of 'tracfficDL'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setTracfficDL(java.lang.Long value) {
      validate(fields()[12], value);
      this.tracfficDL = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'tracfficDL' field has been set.
      * @return True if the 'tracfficDL' field has been set, false otherwise.
      */
    public boolean hasTracfficDL() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'tracfficDL' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearTracfficDL() {
      tracfficDL = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'retranUL' field.
      * @return The value.
      */
    public java.lang.Long getRetranUL() {
      return retranUL;
    }

    /**
      * Sets the value of the 'retranUL' field.
      * @param value The value of 'retranUL'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setRetranUL(java.lang.Long value) {
      validate(fields()[13], value);
      this.retranUL = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'retranUL' field has been set.
      * @return True if the 'retranUL' field has been set, false otherwise.
      */
    public boolean hasRetranUL() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'retranUL' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearRetranUL() {
      retranUL = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'retranDL' field.
      * @return The value.
      */
    public java.lang.Long getRetranDL() {
      return retranDL;
    }

    /**
      * Sets the value of the 'retranDL' field.
      * @param value The value of 'retranDL'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setRetranDL(java.lang.Long value) {
      validate(fields()[14], value);
      this.retranDL = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'retranDL' field has been set.
      * @return True if the 'retranDL' field has been set, false otherwise.
      */
    public boolean hasRetranDL() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'retranDL' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearRetranDL() {
      retranDL = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'failCount' field.
      * @return The value.
      */
    public java.lang.Integer getFailCount() {
      return failCount;
    }

    /**
      * Sets the value of the 'failCount' field.
      * @param value The value of 'failCount'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setFailCount(java.lang.Integer value) {
      validate(fields()[15], value);
      this.failCount = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'failCount' field has been set.
      * @return True if the 'failCount' field has been set, false otherwise.
      */
    public boolean hasFailCount() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'failCount' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearFailCount() {
      failCount = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'transDelay' field.
      * @return The value.
      */
    public java.lang.Long getTransDelay() {
      return transDelay;
    }

    /**
      * Sets the value of the 'transDelay' field.
      * @param value The value of 'transDelay'.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder setTransDelay(java.lang.Long value) {
      validate(fields()[16], value);
      this.transDelay = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'transDelay' field has been set.
      * @return True if the 'transDelay' field has been set, false otherwise.
      */
    public boolean hasTransDelay() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'transDelay' field.
      * @return This builder.
      */
    public rpc.domain.HttpAppHost.Builder clearTransDelay() {
      transDelay = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HttpAppHost build() {
      try {
        HttpAppHost record = new HttpAppHost();
        record.reportTime = fieldSetFlags()[0] ? this.reportTime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.appType = fieldSetFlags()[1] ? this.appType : (java.lang.Integer) defaultValue(fields()[1]);
        record.appSubType = fieldSetFlags()[2] ? this.appSubType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.userIp = fieldSetFlags()[3] ? this.userIp : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.userPort = fieldSetFlags()[4] ? this.userPort : (java.lang.Integer) defaultValue(fields()[4]);
        record.appServerIp = fieldSetFlags()[5] ? this.appServerIp : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.appServerPort = fieldSetFlags()[6] ? this.appServerPort : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.host = fieldSetFlags()[7] ? this.host : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.cellid = fieldSetFlags()[8] ? this.cellid : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.attemps = fieldSetFlags()[9] ? this.attemps : (java.lang.Integer) defaultValue(fields()[9]);
        record.accepts = fieldSetFlags()[10] ? this.accepts : (java.lang.Integer) defaultValue(fields()[10]);
        record.trafficUL = fieldSetFlags()[11] ? this.trafficUL : (java.lang.Long) defaultValue(fields()[11]);
        record.tracfficDL = fieldSetFlags()[12] ? this.tracfficDL : (java.lang.Long) defaultValue(fields()[12]);
        record.retranUL = fieldSetFlags()[13] ? this.retranUL : (java.lang.Long) defaultValue(fields()[13]);
        record.retranDL = fieldSetFlags()[14] ? this.retranDL : (java.lang.Long) defaultValue(fields()[14]);
        record.failCount = fieldSetFlags()[15] ? this.failCount : (java.lang.Integer) defaultValue(fields()[15]);
        record.transDelay = fieldSetFlags()[16] ? this.transDelay : (java.lang.Long) defaultValue(fields()[16]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HttpAppHost>
    WRITER$ = (org.apache.avro.io.DatumWriter<HttpAppHost>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HttpAppHost>
    READER$ = (org.apache.avro.io.DatumReader<HttpAppHost>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
